name: infra
on:
  pull_request:
    paths: [ 'envs/**', 'modules/**', '.github/workflows/infra.yml' ]
  push:
    branches: [ main ]
    paths: [ 'envs/**', 'modules/**', '.github/workflows/infra.yml' ]
  workflow_dispatch: {}

env:
  TF_IN_AUTOMATION: true

jobs:
  plan:
    if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
      - name: Terraform Init
        working-directory: envs/newsapp
        run: terraform init -backend-config=backend.hcl || terraform init
        env:
          TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
      - name: Terraform Validate & Plan
        working-directory: envs/newsapp
        env:
          TF_VAR_tenancy_ocid:              ${{ secrets.OCI_TENANCY_OCID }}
          TF_VAR_user_ocid:                 ${{ secrets.OCI_USER_OCID }}
          TF_VAR_fingerprint:               ${{ secrets.OCI_FINGERPRINT }}
          TF_VAR_private_key_pem:           ${{ secrets.OCI_PRIVATE_KEY_PEM }}
          TF_VAR_ssh_public_key:            ${{ secrets.SSH_PUBLIC_KEY }}

          TF_VAR_region:                    ${{ secrets.OCI_REGION }}
          TF_VAR_availability_domain_number:${{ secrets.AVAILABILITY_DOMAIN_NUMBER }}
          TF_VAR_fault_domain:              ${{ secrets.FAULT_DOMAIN }}

          TF_VAR_compartment_ocid:          ${{ secrets.COMPARTMENT_OCID }}          # compute (e.g., newsapp)
          TF_VAR_network_compartment_ocid:  ${{ secrets.NETWORK_COMPARTMENT_OCID }}  # where VCN/subnet live (root or same)

          TF_VAR_vcn_display_name:          ${{ secrets.VCN_DISPLAY_NAME }}
          TF_VAR_subnet_display_name:       ${{ secrets.SUBNET_DISPLAY_NAME }}

          TF_VAR_image_ocid:                ${{ secrets.IMAGE_OCID }}

          TF_VAR_instances:                 ${{ vars.NODE_COUNT || 4 }}
          TF_VAR_ocpus:                     ${{ vars.NODE_OCPUS || 1 }}
          TF_VAR_memory_gb:                 ${{ vars.NODE_MEMORY_GB || 6 }}
        run: |
          terraform fmt -check
          terraform validate
          terraform plan -input=false -out=plan.out

  apply:
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
      - name: Terraform Init
        working-directory: envs/newsapp
        run: terraform init -backend-config=backend.hcl || terraform init
        env:
          TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
      - name: Terraform Apply
        working-directory: envs/newsapp
        env:
          TF_VAR_tenancy_ocid:              ${{ secrets.OCI_TENANCY_OCID }}
          TF_VAR_user_ocid:                 ${{ secrets.OCI_USER_OCID }}
          TF_VAR_fingerprint:               ${{ secrets.OCI_FINGERPRINT }}
          TF_VAR_private_key_pem:           ${{ secrets.OCI_PRIVATE_KEY_PEM }}
          TF_VAR_ssh_public_key:            ${{ secrets.SSH_PUBLIC_KEY }}

          TF_VAR_region:                    ${{ secrets.OCI_REGION }}
          TF_VAR_availability_domain_number:${{ secrets.AVAILABILITY_DOMAIN_NUMBER }}
          TF_VAR_fault_domain:              ${{ secrets.FAULT_DOMAIN }}

          TF_VAR_compartment_ocid:          ${{ secrets.COMPARTMENT_OCID }}
          TF_VAR_network_compartment_ocid:  ${{ secrets.NETWORK_COMPARTMENT_OCID }}

          TF_VAR_vcn_display_name:          ${{ secrets.VCN_DISPLAY_NAME }}
          TF_VAR_subnet_display_name:       ${{ secrets.SUBNET_DISPLAY_NAME }}

          TF_VAR_image_ocid:                ${{ secrets.IMAGE_OCID }}

          TF_VAR_instances:                 ${{ vars.NODE_COUNT || 4 }}
          TF_VAR_ocpus:                     ${{ vars.NODE_OCPUS || 1 }}
          TF_VAR_memory_gb:                 ${{ vars.NODE_MEMORY_GB || 6 }}
        run: terraform apply -input=false -auto-approve
