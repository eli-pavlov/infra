# .github/workflows/export-tf-oci-vars-to-bucket.yml
name: export-tf-oci-vars-to-bucket
on:
  workflow_dispatch: {}

permissions:
  contents: read

env:
  # Where to store in your bucket (adjust if you want a different bucket/key prefix)
  BUCKET_NAME: ${{ secrets.TF_STATE_BUCKET }}
  KEY_PREFIX: diagnostics/vars

jobs:
  export:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (not strictly needed, but harmless)
        uses: actions/checkout@v4

      - name: Guard required secrets
        # The correct way to check for multiple secrets is to list them explicitly.
        # Shell loops cannot be used inside GitHub Actions expressions.
        shell: bash
        run: |
          set -euo pipefail
          if [ -z "${{ secrets.OCI_TENANCY_OCID }}" ] || \
             [ -z "${{ secrets.OCI_USER_OCID }}" ] || \
             [ -z "${{ secrets.OCI_FINGERPRINT }}" ] || \
             [ -z "${{ secrets.OCI_REGION }}" ] || \
             [ -z "${{ secrets.OCI_PRIVATE_KEY_PEM }}" ] || \
             [ -z "${{ secrets.TF_STATE_BUCKET }}" ]; then
            
            echo "::error::One or more required secrets are missing. Check your repository secrets for OCI_TENANCY_OCID, OCI_USER_OCID, OCI_FINGERPRINT, OCI_REGION, OCI_PRIVATE_KEY_PEM, TF_STATE_BUCKET."
            exit 1
          fi

      - name: Install OCI CLI (quiet)
        shell: bash
        run: |
          python3 -m pip install --quiet --upgrade pip
          python3 -m pip install --quiet oci-cli
          # Ensure the oci binary (installed under ~/.local/bin) is on PATH
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"
          oci --version

      - name: Configure OCI CLI
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$HOME/.oci"
          umask 077
          # write key
          printf "%s" "${{ secrets.OCI_PRIVATE_KEY_PEM }}" > "$HOME/.oci/oci_api_key.pem"
          # write config (absolute path for key_file is required)
          cat > "$HOME/.oci/config" <<CFG
          [DEFAULT]
          user=${{ secrets.OCI_USER_OCID }}
          fingerprint=${{ secrets.OCI_FINGERPRINT }}
          key_file=$HOME/.oci/oci_api_key.pem
          tenancy=${{ secrets.OCI_TENANCY_OCID }}
          region=${{ secrets.OCI_REGION }}
          CFG

      - name: Verify bucket access
        shell: bash
        run: |
          set -euo pipefail
          oci os bucket get --name "${BUCKET_NAME}" >/dev/null

      - name: Build JSON (no output to logs)
        # Refactored to correctly pass variables from the shell to the Python script
        # and from the step to the next steps.
        shell: bash
        env:
          # Pass all secrets and vars as environment variables to the script
          AVAILABILITY_DOMAIN_NUMBER: ${{ secrets.AVAILABILITY_DOMAIN_NUMBER }}
          FAULT_DOMAIN:                 ${{ secrets.FAULT_DOMAIN }}
          COMPARTMENT_OCID:             ${{ secrets.COMPARTMENT_OCID }}
          EGRESS_RULES_JSON:            ${{ secrets.EGRESS_RULES_JSON }}
          IMAGE_OCID:                   ${{ secrets.IMAGE_OCID }}
          INGRESS_RULES_JSON:           ${{ secrets.INGRESS_RULES_JSON }}
          NETWORK_COMPARTMENT_OCID:     ${{ secrets.NETWORK_COMPARTMENT_OCID }}
          OCI_FINGERPRINT:              ${{ secrets.OCI_FINGERPRINT }}
          OCI_PRIVATE_KEY_PEM:          ${{ secrets.OCI_PRIVATE_KEY_PEM }}
          OCI_REGION:                   ${{ secrets.OCI_REGION }}
          OCI_TENANCY_OCID:             ${{ secrets.OCI_TENANCY_OCID }}
          OCI_USER_OCID:                ${{ secrets.OCI_USER_OCID }}
          OS_NAMESPACE:                 ${{ secrets.OS_NAMESPACE }}
          SSH_PUBLIC_KEY:               ${{ secrets.SSH_PUBLIC_KEY }}
          SUBNET_DISPLAY_NAME:          ${{ secrets.SUBNET_DISPLAY_NAME }}
          TF_STATE_BUCKET:              ${{ secrets.TF_STATE_BUCKET }}
          TF_STATE_KEY:                 ${{ secrets.TF_STATE_KEY }}
          VCN_DISPLAY_NAME:             ${{ secrets.VCN_DISPLAY_NAME }}
          # Also pass Terraform vars equivalents for completeness
          TF_VAR_tenancy_ocid:            ${{ secrets.OCI_TENANCY_OCID }}
          TF_VAR_user_ocid:               ${{ secrets.OCI_USER_OCID }}
          TF_VAR_fingerprint:             ${{ secrets.OCI_FINGERPRINT }}
          TF_VAR_private_key_pem:         ${{ secrets.OCI_PRIVATE_KEY_PEM }}
          TF_VAR_region:                  ${{ secrets.OCI_REGION }}
          TF_VAR_compartment_ocid:        ${{ secrets.COMPARTMENT_OCID }}
          TF_VAR_network_compartment_ocid: ${{ secrets.NETWORK_COMPARTMENT_OCID }}
          TF_VAR_availability_domain_number: ${{ secrets.AVAILABILITY_DOMAIN_NUMBER }}
          TF_VAR_fault_domain:            ${{ secrets.FAULT_DOMAIN }}
          TF_VAR_image_ocid:              ${{ secrets.IMAGE_OCID }}
          TF_VAR_ssh_public_key:          ${{ secrets.SSH_PUBLIC_KEY }}
          TF_VAR_vcn_display_name:        ${{ secrets.VCN_DISPLAY_NAME }}
          TF_VAR_ingress_rules_json:      ${{ secrets.INGRESS_RULES_JSON }}
          TF_VAR_egress_rules_json:       ${{ secrets.EGRESS_RULES_JSON }}
          TF_VAR_state_bucket:            ${{ secrets.TF_STATE_BUCKET }}
          TF_VAR_state_key:               ${{ secrets.TF_STATE_KEY }}
        run: |
          set -euo pipefail
          umask 077
          # Create and export shell variables so Python can see them via os.getenv()
          export TS="$(date -u +%Y%m%dT%H%M%SZ)"
          export OUT="/tmp/vars-${TS}.json"

          # Use a Python script to safely build the JSON from environment variables.
          python3 -c "
          import os, json, sys

          meta = {
              'generated_at_utc': os.getenv('TS'),
              'github_repo': os.getenv('GITHUB_REPOSITORY'),
              'github_run_id': os.getenv('GITHUB_RUN_ID'),
              'github_run_attempt': os.getenv('GITHUB_RUN_ATTEMPT'),
          }

          secrets_map = {
              'AVAILABILITY_DOMAIN_NUMBER': os.getenv('AVAILABILITY_DOMAIN_NUMBER'),
              'FAULT_DOMAIN': os.getenv('FAULT_DOMAIN'),
              'COMPARTMENT_OCID': os.getenv('COMPARTMENT_OCID'),
              'EGRESS_RULES_JSON': os.getenv('EGRESS_RULES_JSON'),
              'IMAGE_OCID': os.getenv('IMAGE_OCID'),
              'INGRESS_RULES_JSON': os.getenv('INGRESS_RULES_JSON'),
              'NETWORK_COMPARTMENT_OCID': os.getenv('NETWORK_COMPARTMENT_OCID'),
              'OCI_FINGERPRINT': os.getenv('OCI_FINGERPRINT'),
              'OCI_PRIVATE_KEY_PEM': os.getenv('OCI_PRIVATE_KEY_PEM'),
              'OCI_REGION': os.getenv('OCI_REGION'),
              'OCI_TENANCY_OCID': os.getenv('OCI_TENANCY_OCID'),
              'OCI_USER_OCID': os.getenv('OCI_USER_OCID'),
              'OS_NAMESPACE': os.getenv('OS_NAMESPACE'),
              'SSH_PUBLIC_KEY': os.getenv('SSH_PUBLIC_KEY'),
              'SUBNET_DISPLAY_NAME': os.getenv('SUBNET_DISPLAY_NAME'),
              'TF_STATE_BUCKET': os.getenv('TF_STATE_BUCKET'),
              'TF_STATE_KEY': os.getenv('TF_STATE_KEY'),
              'VCN_DISPLAY_NAME': os.getenv('VCN_DISPLAY_NAME'),
          }

          tf_vars_equivalents = {
              'TF_VAR_tenancy_ocid': os.getenv('TF_VAR_tenancy_ocid'),
              'TF_VAR_user_ocid': os.getenv('TF_VAR_user_ocid'),
              'TF_VAR_fingerprint': os.getenv('TF_VAR_fingerprint'),
              'TF_VAR_private_key_pem': os.getenv('TF_VAR_private_key_pem'),
              'TF_VAR_region': os.getenv('TF_VAR_region'),
              'TF_VAR_compartment_ocid': os.getenv('TF_VAR_compartment_ocid'),
              'TF_VAR_network_compartment_ocid': os.getenv('TF_VAR_network_compartment_ocid'),
              'TF_VAR_availability_domain_number': os.getenv('TF_VAR_availability_domain_number'),
              'TF_VAR_fault_domain': os.getenv('TF_VAR_fault_domain'),
              'TF_VAR_image_ocid': os.getenv('TF_VAR_image_ocid'),
              'TF_VAR_ssh_public_key': os.getenv('TF_VAR_ssh_public_key'),
              'TF_VAR_vcn_display_name': os.getenv('TF_VAR_vcn_display_name'),
              'TF_VAR_ingress_rules_json': os.getenv('TF_VAR_ingress_rules_json'),
              'TF_VAR_egress_rules_json': os.getenv('TF_VAR_egress_rules_json'),
              'TF_VAR_state_bucket': os.getenv('TF_VAR_state_bucket'),
              'TF_VAR_state_key': os.getenv('TF_VAR_state_key'),
          }

          data = {
              'meta': meta,
              'secrets': secrets_map,
              'terraform_vars_equivalents': tf_vars_equivalents,
          }

          with open(os.getenv('OUT'), 'w') as f:
              json.dump(data, f, indent=2)
                    "
                    echo "JSON ready at ${OUT}"
                    # The following lines explicitly set environment variables for the next steps
                    echo "FILE_PATH=${OUT}" >> $GITHUB_ENV
                    echo "TS=${TS}" >> $GITHUB_ENV

      - name: Optional encrypt with AES-256 (set MIGRATION_AES_PASSPHRASE secret to enable)
        if: ${{ secrets.MIGRATION_AES_PASSPHRASE != '' }}
        shell: bash
        run: |
          set -euo pipefail
          openssl enc -aes-256-cbc -salt -pbkdf2 \
            -pass pass:"${{ secrets.MIGRATION_AES_PASSPHRASE }}" \
            -in "$FILE_PATH" -out "${FILE_PATH}.enc"
          echo "FILE_PATH=${FILE_PATH}.enc" >> $GITHUB_ENV
          echo "ENC_SUFFIX=.enc" >> $GITHUB_ENV

      - name: Upload to OCI Object Storage
        shell: bash
        run: |
          set -euo pipefail
          OBJ_NAME="${KEY_PREFIX}/vars-${TS}.json${ENC_SUFFIX:-}"
          CT="application/json"
          if [ -n "${ENC_SUFFIX:-}" ]; then CT="application/octet-stream"; fi
          echo "Uploading to bucket=${BUCKET_NAME}, object=${OBJ_NAME}"
          oci os object put \
            --bucket-name "${BUCKET_NAME}" \
            --name "${OBJ_NAME}" \
            --file "${FILE_PATH}" \
            --content-type "${CT}" \
            --force > /dev/null
          echo "Uploaded: ${OBJ_NAME}"
