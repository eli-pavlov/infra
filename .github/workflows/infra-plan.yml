# .github/workflows/infra-plan.yml
name: infra-plan
on:
  pull_request:
    paths: [ 'envs/**', 'modules/**', 'bootstrap/**', '.github/workflows/**' ]
  workflow_dispatch: {}

concurrency:
  group: infra-plan-${{ github.ref }}
  cancel-in-progress: false

env:
  TF_IN_AUTOMATION: true

jobs:
  ensure_state_bucket:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
      - name: Terraform Init (bootstrap)
        working-directory: bootstrap/state-bucket
        run: terraform init
      - name: Ensure state bucket exists (idempotent)
        working-directory: bootstrap/state-bucket
        env:
          TF_VAR_tenancy_ocid:       ${{ secrets.OCI_TENANCY_OCID }}
          TF_VAR_user_ocid:          ${{ secrets.OCI_USER_OCID }}
          TF_VAR_fingerprint:        ${{ secrets.OCI_FINGERPRINT }}
          TF_VAR_private_key_pem:    ${{ secrets.OCI_PRIVATE_KEY_PEM }}
          TF_VAR_region:             ${{ secrets.OCI_REGION }}
          TF_VAR_compartment_ocid:   ${{ secrets.COMPARTMENT_OCID }}
          TF_VAR_bucket_name:        ${{ secrets.TF_STATE_BUCKET }}
          TF_VAR_os_namespace:       ${{ secrets.OS_NAMESPACE }}
        run: terraform apply -input=false -auto-approve

  plan:
    needs: [ensure_state_bucket]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3

      - name: Terraform version
        run: terraform -version

      - name: Terraform fmt (auto-fix)
        run: terraform fmt -recursive

      - name: Detect fork
        id: detect
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ] && \
              [ "${{ github.event.pull_request.head.repo.full_name }}" != "${{ github.repository }}" ]; then
            echo "forked=true" >> $GITHUB_OUTPUT
          else
            echo "forked=false" >> $GITHUB_OUTPUT
          fi

      # Forked PRs: run without backend/provider creds
      - name: Init (no backend) + validate
        if: steps.detect.outputs.forked == 'true'
        working-directory: envs/newsapp
        run: |
          terraform init -backend=false
          terraform validate

      # Same-repo PRs: full remote-state plan
      - name: Write backend config (OCI Object Storage)
        if: steps.detect.outputs.forked == 'false'
        working-directory: envs/newsapp
        run: |
          cat > backend.oci.hcl <<'EOF'
          bucket    = "${{ secrets.TF_STATE_BUCKET }}"
          namespace = "${{ secrets.OS_NAMESPACE }}"
          region    = "${{ secrets.OCI_REGION }}"
          key       = "newsapp.tfstate"
          EOF

      - name: Write OCI API key to disk
        run: |
          umask 077
          printf "%s" "${{ secrets.OCI_PRIVATE_KEY_PEM }}" > $HOME/oci_api_key.pem
          
      - name: Terraform Init (OCI backend)
        if: steps.detect.outputs.forked == 'false'
        working-directory: envs/newsapp
        env:
          OCI_TENANCY_OCID:      ${{ secrets.OCI_TENANCY_OCID }}
          OCI_USER_OCID:         ${{ secrets.OCI_USER_OCID }}
          OCI_FINGERPRINT:       ${{ secrets.OCI_FINGERPRINT }}
          OCI_REGION:            ${{ secrets.OCI_REGION }}
          OCI_PRIVATE_KEY_PATH:  $HOME/oci_api_key.pem
        run: terraform init -backend-config=backend.oci.hcl

      - name: Terraform validate
        if: steps.detect.outputs.forked == 'false'
        working-directory: envs/newsapp
        run: terraform validate

      - name: Terraform plan
        if: steps.detect.outputs.forked == 'false'
        working-directory: envs/newsapp
        env:
          TF_VAR_tenancy_ocid:                 ${{ secrets.OCI_TENANCY_OCID }}
          TF_VAR_user_ocid:                    ${{ secrets.OCI_USER_OCID }}
          TF_VAR_fingerprint:                  ${{ secrets.OCI_FINGERPRINT }}
          TF_VAR_private_key_path:             $HOME/oci_api_key.pem
          TF_VAR_ssh_public_key:               ${{ secrets.SSH_PUBLIC_KEY }}

          TF_VAR_region:                       ${{ secrets.OCI_REGION }}
          TF_VAR_availability_domain_number:   ${{ secrets.AVAILABILITY_DOMAIN_NUMBER }}
          TF_VAR_fault_domain:                 ${{ secrets.FAULT_DOMAIN }}

          TF_VAR_compartment_ocid:             ${{ secrets.COMPARTMENT_OCID }}
          TF_VAR_network_compartment_ocid:     ${{ secrets.NETWORK_COMPARTMENT_OCID }}

          TF_VAR_image_ocid:                   ${{ secrets.IMAGE_OCID }}

          TF_VAR_ocpus:                        ${{ vars.NODE_OCPUS || 1 }}
          TF_VAR_memory_gb:                    ${{ vars.NODE_MEMORY_GB || 6 }}
        run: terraform plan -input=false -out=plan.out

      - name: Upload plan artifact
        if: steps.detect.outputs.forked == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: tf-plan
          path: envs/newsapp/plan.out