name: infra-plan
on:
  pull_request:
    paths: [ 'envs/**', 'modules/**', 'bootstrap/**', '.github/workflows/**' ]
  workflow_dispatch: {}

concurrency:
  group: infra-plan-${{ github.ref }}
  cancel-in-progress: false

env:
  TF_IN_AUTOMATION: true

jobs:
  ensure_state_bucket:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
      - name: Terraform Init (bootstrap)
        working-directory: bootstrap/state-bucket
        run: terraform init
      - name: Ensure state bucket exists (idempotent)
        working-directory: bootstrap/state-bucket
        env:
          TF_VAR_tenancy_ocid:     ${{ secrets.OCI_TENANCY_OCID }}
          TF_VAR_user_ocid:        ${{ secrets.OCI_USER_OCID }}
          TF_VAR_fingerprint:      ${{ secrets.OCI_FINGERPRINT }}
          TF_VAR_private_key_pem:  ${{ secrets.OCI_PRIVATE_KEY_PEM }}
          TF_VAR_region:           ${{ secrets.OCI_REGION }}
          TF_VAR_compartment_ocid: ${{ secrets.COMPARTMENT_OCID }}
          TF_VAR_bucket_name:      ${{ secrets.TF_STATE_BUCKET }}
          TF_VAR_os_namespace:     ${{ secrets.OS_NAMESPACE }}
        run: terraform apply -input=false -auto-approve

  plan:
    needs: [ensure_state_bucket]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3

      - name: Terraform version
        run: terraform -version

      - name: Write backend config (OCI Object Storage)
        working-directory: envs/newsapp
        run: |
          cat > backend.oci.hcl <<'EOF'
          bucket    = "${{ secrets.TF_STATE_BUCKET }}"
          namespace = "${{ secrets.OS_NAMESPACE }}"
          region    = "${{ secrets.OCI_REGION }}"
          key       = "newsapp.tfstate"
          EOF

      - name: Write OCI API key to disk (backend auth)
        working-directory: envs/newsapp
        run: |
          umask 077
          cat > /home/runner/oci_api_key.pem <<'PEM'
          ${{ secrets.OCI_PRIVATE_KEY_PEM }}
          PEM

      - name: Terraform Init (OCI backend)
        working-directory: envs/newsapp
        env:
          OCI_tenancy_ocid:     ${{ secrets.OCI_TENANCY_OCID }}
          OCI_user_ocid:        ${{ secrets.OCI_USER_OCID }}
          OCI_fingerprint:      ${{ secrets.OCI_FINGERPRINT }}
          OCI_region:           ${{ secrets.OCI_REGION }}
          OCI_private_key_path: /home/runner/oci_api_key.pem
        run: terraform init -backend-config=backend.oci.hcl

      - name: Terraform Validate & Plan
        working-directory: envs/newsapp
        env:
          TF_VAR_tenancy_ocid:               ${{ secrets.OCI_TENANCY_OCID }}
          TF_VAR_user_ocid:                  ${{ secrets.OCI_USER_OCID }}
          TF_VAR_fingerprint:                ${{ secrets.OCI_FINGERPRINT }}
          TF_VAR_private_key_pem:            ${{ secrets.OCI_PRIVATE_KEY_PEM }}
          TF_VAR_ssh_public_key:             ${{ secrets.SSH_PUBLIC_KEY }}
          TF_VAR_region:                     ${{ secrets.OCI_REGION }}
          TF_VAR_availability_domain_number: ${{ secrets.AVAILABILITY_DOMAIN_NUMBER }}
          TF_VAR_fault_domain:               ${{ secrets.FAULT_DOMAIN }}
          TF_VAR_compartment_ocid:           ${{ secrets.COMPARTMENT_OCID }}
          TF_VAR_network_compartment_ocid:   ${{ secrets.NETWORK_COMPARTMENT_OCID }}
          TF_VAR_vcn_display_name:           ${{ secrets.VCN_DISPLAY_NAME }}
          TF_VAR_subnet_display_name:        ${{ secrets.SUBNET_DISPLAY_NAME }}
          TF_VAR_image_ocid:                 ${{ secrets.IMAGE_OCID }}
          TF_VAR_ingress_rules_json:         ${{ secrets.INGRESS_RULES_JSON }}
          TF_VAR_ocpus:                      ${{ vars.NODE_OCPUS || 1 }}
          TF_VAR_memory_gb:                  ${{ vars.NODE_MEMORY_GB || 6 }}
        run: |
          terraform fmt -check
          terraform validate
          terraform plan -input=false -out=plan.out

      - name: Upload plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: tf-plan
          path: envs/newsapp/plan.out
